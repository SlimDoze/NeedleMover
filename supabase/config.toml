# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "NeedleMover"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = []

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# Die Basis-URL deiner Website. Wird als Erlaubnisliste für Weiterleitungen verwendet und für die Erstellung von URLs in E-Mails.
  site_url = "needlemover://verify"
  additional_redirect_urls = [
  "needlemover://verify",
  "http://localhost:3000",
  "https://localhost:3000"
]
# Gültigkeitsdauer der Tokens in Sekunden. Standard ist 3600 (1 Stunde), Maximum 604.800 (1 Woche).
jwt_expiry = 3600
# Wenn deaktiviert, läuft der Refresh-Token nie ab.
enable_refresh_token_rotation = true
# Erlaubt die Wiederverwendung von Refresh-Tokens nach Ablauf, bis zum angegebenen Intervall in Sekunden.
# Erfordert enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Zulassen/Verbieten neuer Benutzerregistrierungen in deinem Projekt.
enable_signup = true
# Zulassen/Verbieten anonymer Anmeldungen in deinem Projekt.
enable_anonymous_sign_ins = false
# Zulassen/Verbieten des Testens der manuellen Verknüpfung von Konten.
enable_manual_linking = false
# Passwörter kürzer als dieser Wert werden als schwach abgelehnt. Minimum 6, empfohlen 8 oder mehr.
minimum_password_length = 6
# Passwörter, die die folgenden Anforderungen nicht erfüllen, werden als schwach abgelehnt. Unterstützte Werte
# sind: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

# Konfiguriere einen der unterstützten Captcha-Anbieter: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Zulassen/Verbieten neuer Benutzerregistrierungen via E-Mail in deinem Projekt.
enable_signup = true
# Wenn aktiviert, muss ein Benutzer jede E-Mail-Änderung sowohl an der alten als auch an der neuen E-Mail
# bestätigen. Wenn deaktiviert, muss nur die neue E-Mail bestätigt werden.
double_confirm_changes = true
# Wenn aktiviert, müssen Benutzer ihre E-Mail-Adresse bestätigen, bevor sie sich anmelden können.
enable_confirmations = true
# Wenn aktiviert, müssen sich Benutzer erneut authentifizieren oder kürzlich angemeldet sein, um ihr Passwort zu ändern.
secure_password_change = false
# Kontrolliert die Mindestzeit, die vergehen muss, bevor eine weitere Registrierungsbestätigung oder Passwort-Reset-E-Mail gesendet wird.
max_frequency = "1m0s"
# Anzahl der Zeichen im E-Mail-OTP.
otp_length = 6
# Anzahl der Sekunden, bevor das E-Mail-OTP abläuft (Standard 1 Stunde).
otp_expiry = 86400

# Verwende einen produktionsreifen SMTP-Server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Auskommentieren, um E-Mail-Vorlagen anzupassen
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Zulassen/Verbieten neuer Benutzerregistrierungen via SMS in deinem Projekt.
enable_signup = false
# Wenn aktiviert, müssen Benutzer ihre Telefonnummer bestätigen, bevor sie sich anmelden können.
enable_confirmations = false
# Vorlage für das Senden von OTP an Benutzer
template = "Your code is {{ .Code }}"
# Kontrolliert die Mindestzeit, die vergehen muss, bevor ein weiteres SMS-OTP gesendet wird.
max_frequency = "5s"

# Verwende vordefinierte Zuordnung von Telefonnummer zu OTP für Tests.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Konfiguriere Timeouts für angemeldete Sitzungen.
# [auth.sessions]
# Erzwinge Abmeldung nach der angegebenen Dauer.
# timebox = "24h"
# Erzwinge Abmeldung, wenn der Benutzer länger als die angegebene Dauer inaktiv war.
# inactivity_timeout = "8h"

# Dieser Hook wird ausgeführt, bevor ein Token ausgestellt wird, und ermöglicht es dir, zusätzliche Claims basierend auf der verwendeten Authentifizierungsmethode hinzuzufügen.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Konfiguriere einen der unterstützten SMS-Anbieter: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# Commit deinen Twilio-Auth-Token NICHT an Git. Verwende stattdessen die Substitution von Umgebungsvariablen:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-Faktor-Authentifizierung ist im Supabase Pro-Plan verfügbar.
[auth.mfa]
# Kontrolliere, wie viele MFA-Faktoren gleichzeitig pro Benutzer registriert werden können.
max_enrolled_factors = 10

# Kontrolliere MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = true
verify_enabled = true

# Konfiguriere MFA via Telefonnachrichten
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Konfiguriere MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Verwende einen externen OAuth-Anbieter. Die vollständige Liste der Anbieter ist: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# Commit dein OAuth-Provider-Secret NICHT an Git. Verwende stattdessen die Substitution von Umgebungsvariablen:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Überschreibt die Standard-Auth-RedirectUrl.
redirect_uri = ""
# Überschreibt die Standard-Auth-Provider-URL. Wird verwendet, um selbstgehostetes GitLab, Single-Tenant Azure
# oder andere Drittanbieter-OIDC-Provider zu unterstützen.
url = ""
# Wenn aktiviert, wird die Nonce-Prüfung übersprungen. Erforderlich für lokale Anmeldung mit Google-Auth.
skip_nonce_check = false

# Verwende Firebase Auth als Drittanbieter neben Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Verwende Auth0 als Drittanbieter neben Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Verwende AWS Cognito (Amplify) als Drittanbieter neben Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Konfiguriere eine der unterstützten Anforderungsrichtlinien: `oneshot`, `per_worker`.
# Verwende `oneshot` für Hot-Reload oder `per_worker` für Lasttests.
policy = "oneshot"
# Port zum Anhängen des Chrome-Inspectors für das Debugging von Edge-Funktionen.
inspector_port = 8083

# Verwende diese Konfigurationen, um deine Edge-Funktion anzupassen.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Auskommentieren, um einen benutzerdefinierten Dateipfad zum Einstiegspunkt anzugeben.
# Unterstützte Dateierweiterungen sind: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"
# Gibt statische Dateien an, die mit der Funktion gebündelt werden sollen. Unterstützt Glob-Muster.
# Wenn du zum Beispiel statische HTML-Seiten in deiner Funktion bereitstellen möchtest:
# static_files = [ "./functions/MY_FUNCTION_NAME/*.html" ]

[analytics]
enabled = true
port = 54327
# Konfiguriere einen der unterstützten Backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimentelle Funktionen können jederzeit veraltet sein
[experimental]
# Konfiguriert die Postgres-Speicher-Engine zur Verwendung von OrioleDB (S3)
orioledb_version = ""
# Konfiguriert die S3-Bucket-URL, z.B. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Konfiguriert die S3-Bucket-Region, z.B. us-east-1
s3_region = "env(S3_REGION)"
# Konfiguriert AWS_ACCESS_KEY_ID für den S3-Bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Konfiguriert AWS_SECRET_ACCESS_KEY für den S3-Bucket
s3_secret_key = "env(S3_SECRET_KEY)"